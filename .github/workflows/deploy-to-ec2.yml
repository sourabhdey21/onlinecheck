name: Deploy to EC2 staging deployment

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/private_key
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: Copy files to EC2
        run: |
          rsync -avz --exclude 'venv' --exclude '.git' -e "ssh -i ~/.ssh/private_key" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/network-toolkit/

      - name: Install Docker and Docker Compose on EC2
        run: |
          ssh -i ~/.ssh/private_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Update package list and install dependencies
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

            # Add Docker's official GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

            # Add Docker repository
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

            # Install Docker
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Add current user to docker group
            sudo usermod -aG docker $USER
          EOF

      - name: SSH and deploy on EC2
        run: |
          ssh -i ~/.ssh/private_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/network-toolkit
            docker-compose down || true
            docker-compose build --no-cache
            docker-compose up -d --remove-orphans
          EOF